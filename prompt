#! /usr/bin/env bash
#-------------------------------------------------------------------------------
# File        : .prompt
# Author      : Lewis Russell
# Description : Very useful zsh/csh/tcsh/bash prompt for seamless use with Git
#               and SVN.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
SHELL="$1"
RET_CODE="$2"
NO_SCM="$3"
CMD_TIME="$4"

#-------------------------------------------------------------------------------
# Init
#-------------------------------------------------------------------------------
# Unalias all aliases
unalias -a

#-------------------------------------------------------------------------------
# Globals
#-------------------------------------------------------------------------------
CHECKOUT=""
CHECKOUT_IS_TAG=0
STAGED_CHANGED=""
STAGED_ADDED=""
STAGED_DELETED=""
CONFLICTS=""
UNSTAGED_CHANGED=""
UNSTAGED_DELETED=""
UNTRACKED=""
STASHES=""
SUBMODULE_UNSYNC=""
SUBMODULE_UNINIT=""
LOCAL_BRANCHES=""

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
# FANCY_PROMPT_DOUBLE_LINE

# FANCY_PROMPT_FETCH_TIMEOUT

# FANCY_PROMPT_TIMEOUT

# FANCY_PROMPT_USE_NERD_SYMBOLS
#     NOTE: this is a multi-char symbol which causes glitches with zsh tab
#     completion. e.g. vim <tab> if locale is not setup correctly.
#     export LC_CTYPE=en_US.UTF-8

# FANCY_PROMPT_USE_SYMBOLS

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
var_enabled() {
    [[ "$1" ]] && [[ $1 != 0 ]]
}

check_error() {
    RET_CODE="$1"
    CODE="$2"
    if [ "$RET_CODE" != 0 ]; then
        echo "ERROR $CODE:$RET_CODE"
        exit 1
    fi
}

in_git() {
    if [[ "$VCS_STATUS_RESULT" != "" ]]; then
        [[ "$VCS_STATUS_RESULT" =~ ^ok ]]
    else
        [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) = "true" ]]
    fi
}

in_svn() {
    svn ls --depth empty > /dev/null 2>&1
    return $?
}

get_svn_local_rev() {
    info="$1"
    echo "$info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

get_svn_remote_rev() {
    info="$1"

    repo=$(echo "$info" | grep 'URL' | sed -E 's/URL: (.+)/\1/')

    remote_info=$(timeout "$TIMEOUT" svn info "$repo")
    check_error "$?" "10"

    echo "$remote_info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

vercomp() {
    local i

    if [[ "$1" = "$2" ]]; then
        return 0
    fi

    # shellcheck disable=2206
    declare -a ver1=(${1//./ })
    # shellcheck disable=2206
    declare -a ver2=(${2//./ })

    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((ver1[i] > ver2[i])); then
            return 0
        elif ((ver1[i] < ver2[i])); then
            return 1
        fi
    done
    return 1
}

git_vercomp() {
    if [ -z "$GIT_VERSION" ]; then
        GIT_VERSION=$(git --version | sed -E 's/git version ([0-9.]+)/\1/g')
    fi

    vercomp "$GIT_VERSION" "$1"
}

set_git_checkout() {
    # shellcheck disable=2207
    declare -a rp=($(git rev-parse --abbrev-ref HEAD --git-dir '@{u}'))

    CHECKOUT="${rp[0]}"

    local git_dir="${rp[1]}"
    local remote_full="${rp[2]}"
    local remote_abbr="${remote_full#*/}"

    if [[ "$CHECKOUT" =~ HEAD ]]; then
        local tag

        # Show short hash if not on a branch
        CHECKOUT=$(git rev-parse --short HEAD)

        if [[ -d "$git_dir/rebase-merge" || -d "$git_dir/rebase-apply" ]]; then
            # Are we rebasing?
            CHECKOUT="$CHECKOUT(rebasing)"
        elif [[ -f "$git_dir/BISECT_START" ]]; then
            # Are we bisecting?
            CHECKOUT="$CHECKOUT(bisecting)"
        elif tag=$(git describe --candidates=1 --exact-match); then
            CHECKOUT=$tag
            CHECKOUT_IS_TAG=1
        fi
    fi

    if [ -n "$remote_abbr" ]; then
        if [ "$CHECKOUT" != "$remote_abbr" ]; then
            CHECKOUT="$CHECKOUT->$remote_abbr"
        fi
    elif [[ $CHECKOUT_IS_TAG != 1 ]]; then
        CHECKOUT="$CHECKOUT!"
    fi
}

parse_porcelain_info() {
    local porcelain_info=$1
    # porcelain info should be common between git and svn
    if [ "$porcelain_info" != "?" ]; then
        STAGED_CHANGED=0
        STAGED_ADDED=0
        STAGED_DELETED=0
        UNSTAGED_DELETED=0
        UNSTAGED_CHANGED=0
        UNTRACKED=0
        CONFLICTS=0

        while IFS= read -r line ; do
            if [[ $line =~ ^[MRC][\ MD] ]]; then ((STAGED_CHANGED   ++)); fi
            if [[ $line =~ ^A[\ MD]     ]]; then ((INDEX_NEW        ++)); fi
            if [[ $line =~ ^D\          ]]; then ((STAGED_DELETED   ++)); fi
            if [[ $line =~ ^[\ MARC]D   ]]; then ((UNSTAGED_DELETED ++)); fi
            if [[ $line =~ ^[\ MARC]M   ]]; then ((UNSTAGED_CHANGED ++)); fi
            if [[ $line =~ ^[?][?]      ]]; then ((UNTRACKED        ++)); fi
            if [[ $line =~ ^[DU][DU]    ]]; then ((CONFLICTS        ++)); fi
            if [[ $line =~ ^[AU][AU]    ]]; then ((CONFLICTS        ++)); fi
            # DD  unmerged, both deleted
            # AU  unmerged, added by us
            # UD  unmerged, deleted by them
            # UA  unmerged, added by them
            # DU  unmerged, deleted by us
            # AA  unmerged, both added
            # UU  unmerged, both modified
        done <<< "$porcelain_info"
    fi
}

set_git_submodule_info() {
    local submodule_info
    submodule_info=$(timeout "$TIMEOUT2" git submodule status --recursive 2> /dev/null)
    if [ "$submodule_info" != "" ]; then
        SUBMODULE_UNSYNC=$(grep -cE '^\+' <<< "$submodule_info")
        SUBMODULE_UNINIT=$(grep -cE '^-'  <<< "$submodule_info")
    fi
}

set_git_local_branches() {
    # Local branches that do not have an upstream of the same name
    if git_vercomp "2.4.0"; then
        LOCAL_BRANCHES=$(git branch -vv --format='%(refname:strip=2)#%(upstream:strip=3)' | grep -vcE '([^#]+)#\1')
    else
        LOCAL_BRANCHES=$(git branch | grep -cv master)
    fi
}

set_gitstatus_info() {
    STAGED_CHANGED=$VCS_STATUS_NUM_STAGED
    STAGED_ADDED=$VCS_STATUS_NUM_STAGED_NEW
    STAGED_DELETED=$VCS_STATUS_NUM_STAGED_DELETED
    CONFLICTS=$VCS_STATUS_NUM_CONFLICTED
    UNSTAGED_CHANGED=$VCS_STATUS_NUM_UNSTAGED
    UNSTAGED_DELETED=$VCS_STATUS_NUM_UNSTAGED_DELETED
    UNTRACKED=$VCS_STATUS_NUM_UNTRACKED
    STASHES=$VCS_STATUS_STASHES
    COMMITS_AHEAD=$VCS_STATUS_COMMITS_AHEAD
    COMMITS_BEHIND=$VCS_STATUS_COMMITS_BEHIND

    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
        CHECKOUT=$VCS_STATUS_LOCAL_BRANCH
    elif [[ -n $VCS_STATUS_TAG ]]; then
        CHECKOUT=$VCS_STATUS_TAG
        CHECKOUT_IS_TAG=1
    else
        CHECKOUT=${VCS_STATUS_COMMIT[1,8]}
    fi

    set_git_submodule_info
    set_git_local_branches
}

set_git_info() {
    local info
    local error

    if git_vercomp "1.7.2"; then
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --branch --porcelain "$GIT_STATUS_OPTS")
    else
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --porcelain)
    fi
    error=$(check_error "$?" "2")

    set_git_submodule_info

    parse_porcelain_info "$info"

    if [ "$error" = "" ]; then
        branch_info=$(head -1 <<< "$info")
        COMMITS_AHEAD=$(grep 'ahead'  <<< "$branch_info" | sed -E  's/.*ahead ([0-9]+).*/\1/g')
        COMMITS_BEHIND=$(grep 'behind' <<< "$branch_info" | sed -E 's/.*behind ([0-9]+).*/\1/g')
        error=$(check_error "$?" "4")

        if [ "$error" == "" ]; then
            STASHES=$(git stash list | wc -l)

            set_git_local_branches

            if git_vercomp "1.7.2"; then
                set_git_checkout
            else
                CHECKOUT="!$(git rev-parse --abbrev-ref HEAD)"
            fi
        fi
    fi
}

set_svn_info() {
    local info
    local error

    info=$(timeout "$TIMEOUT" svn info)
    error=$(check_error "$?" "7")

    if [ "$error" == "" ]; then
        local local_rev
        local remote_rev

        local_rev=$(get_svn_local_rev "$info")
        remote_rev=$(get_svn_remote_rev "$info")

        if [[ $remote_rev =~ ^[0-9]+$ ]]; then
            COMMITS_BEHIND=$((remote_rev - local_rev))
        else
            error=$(check_error "1" "9")
        fi

        local porcelain_info
        if porcelain_info=$(timeout "$TIMEOUT" svn status 2> /dev/null); then
            porcelain_info="?"
        fi
        parse_porcelain_info "$porcelain_info"

        CHECKOUT="r$local_rev"
    fi
}

get_scm_prompt() {
    local src_ctrl=""
    local co_sym

    if [ "$error" = "" ]; then
        if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
            if [[ $CHECKOUT_IS_TAG == 1 ]]; then
                co_sym=""
            else
                co_sym=""
            fi
            # co_sym=""
        elif var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
            co_sym=""
        fi

        build_section() {
            local colour=$1
            local symbol=$2
            local value=$3
            if { [[ $value ]] && [[ $value != 0 ]]; }; then
                echo "$colour$symbol$value"
            fi
        }

        # 穀 者 視  

        src_ctrl+=$(build_section "$gray"   "$co_sym" "$CHECKOUT"        )
        src_ctrl+=$(build_section " $white"   ↑        "$COMMITS_AHEAD"   )
        src_ctrl+=$(build_section " $white"   ↓        "$COMMITS_BEHIND"  )
        src_ctrl+=$(build_section " $white"           "$SUBMODULE_UNINIT")
        src_ctrl+=$(build_section " $red"             "$SUBMODULE_UNSYNC")
        src_ctrl+=$(build_section " $green"   ●        "$STAGED_CHANGED"  )
        src_ctrl+=$(build_section " $green"   +        "$STAGED_ADDED"    )
        src_ctrl+=$(build_section " $green"   -        "$STAGED_DELETED"  )
        src_ctrl+=$(build_section " $red"     ✖        "$CONFLICTS"       )
        src_ctrl+=$(build_section " $red"     +        "$UNSTAGED_CHANGED")
        src_ctrl+=$(build_section " $red"     -        "$UNSTAGED_DELETED")
        # src_ctrl+=$(build_section " $magenta" +        "$UNTRACKED"       )
        src_ctrl+=$(build_section " $magenta" …        "$UNTRACKED"       )
        src_ctrl+=$(build_section " $red"     ⚑        "$STASHES"         )
        src_ctrl+=$(build_section " $yellow"          "$LOCAL_BRANCHES"  )
    else
        src_ctrl+="$red$error"
    fi

    if [[ "$src_ctrl" == '' ]]; then
        src_ctrl='...'
    fi

    printf "%s" "${src_ctl_colour}$src_ctrl$src_ctl_colour"
}

get_prompt_arrow() {
    if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
        if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
            #  
            arrow="❯"
        else
            arrow="▶"
        fi
    else
        arrow=">"
    fi

    echo "$ret_colour$arrow$end"
}

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
GIT_STATUS_OPTS="--ignore-submodules"
TIMEOUT=${FANCY_PROMPT_TIMEOUT-3}
TIMEOUT2=$((TIMEOUT*2))

if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
    FANCY_PROMPT_USE_SYMBOLS=1
fi

#-------------------------------------------------------------------------------
# Attributes & Colours
#-------------------------------------------------------------------------------
if [ "$SHELL" == "bash" ]; then
    c_start='\['
    c_end='\]'
    user='\u'
    host='\H'
else # csh, tcsh and zsh
    c_start='%{'
    c_end='%}'
    user='%n'
    host='%m'
fi

# reverse="${c_start}\\e[3;35m${c_end}"
# underlined="${c_start}\\e[4;35m${c_end}"
# dim="${c_start}\\e[10;35m${c_end}"
gray="$c_start\\e[0;90m$c_end"
red="$c_start\\e[0;31m$c_end"
green="$c_start\\e[0;32m$c_end"
yellow="$c_start\\e[0;33m$c_end"
blue="$c_start\\e[0;34m$c_end"
magenta="$c_start\\e[0;35m$c_end"
cyan="$c_start\\e[0;36m$c_end"
white="$c_start\\e[0;37m$c_end"
end="$c_start\\e[0m$c_end" # This is needed at the end.

# Use a different colour for each shell.

case "$SHELL" in
    bash) dir_colour="$yellow"  ;;
    zsh)  dir_colour="$green"   ;;
    *)    dir_colour="$magenta" ;;
esac

src_ctl_colour="$gray"

#-------------------------------------------------------------------------------
# Source Control
#-------------------------------------------------------------------------------

# If we a located somewhere deep in .git/.. then navigate out of it to prevent
# the error: "fatal: This operation must be run in a work tree"
if pwd | grep -q "\\.git"; then
    cd "$(pwd | sed -E 's/\.git(\/.*)?//g')" || exit
fi

prompt_info=""
if in_git; then
    if ((!NO_SCM)); then
        if [[ "$VCS_STATUS_RESULT" != "" ]]; then
            set_gitstatus_info
        else
            set_git_info
        fi
    fi
    prompt_info=$(get_scm_prompt)
elif in_svn; then
    if ((!NO_SCM)); then
        set_svn_info
    fi
    prompt_info=$(get_scm_prompt)
fi


if [[ $VCS_STATUS_WORKDIR != "" ]]; then
    dir=$(basename "$VCS_STATUS_WORKDIR")/$(git rev-parse --show-prefix)
    dir=${dir%?}  # Remove last /
elif in_git; then
    dir=$(basename "$(git rev-parse --show-toplevel)")/$(git rev-parse --show-prefix)
    dir=${dir%?}  # Remove last /
elif [ "$SHELL" == "bash" ]; then
    dir='\W'
else
    dir='%c'
fi

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
prompt=""
prompt+="$blue"
prompt+="$host:"
prompt+="$cyan"
prompt+="$user:"
prompt+="$dir_colour"
prompt+="$dir "

if [ "$RET_CODE" == 0 ]; then
    ret_colour="$cyan"
else
    ret_colour="$red"
fi

convertsecs() {
    ((d=${1}/86400))
    ((h=(${1}/3600)%24))
    ((m=(${1}/60)%60))
    ((s=${1}%60))
    if ((d!=0)); then
        printf "%dd %dh %dm %ds" "$d" "$h" "$m" "$s"
    elif ((h!=0)); then
        printf "%dh %dm %ds" "$h" "$m" "$s"
    elif ((m!=0)); then
        printf "%dm %ds" "$m" "$s"
    else
        printf "%ds" "$s"
    fi
}

prompt_time=''
if [[ $CMD_TIME ]] && ! [[ $CMD_TIME == 0* ]]; then
    prompt_time="$gray$(convertsecs "$CMD_TIME")"
fi

prompt_end="$(get_prompt_arrow) "

if var_enabled "$FANCY_PROMPT_DOUBLE_LINE"; then
    printf "%s" "$prompt_time\\n"
    printf "%s" "$prompt$prompt_info\\n$prompt_end"
else
    printf "%s" "$prompt$prompt_info$prompt_end"
fi
