#! /usr/bin/env bash
#-------------------------------------------------------------------------------
# File        : .prompt
# Author      : Lewis Russell
# Description : Very useful zsh/csh/tcsh/bash prompt for seamless use with Git
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
SHELL="$1"
RET_CODE="$2"
FAST="$3"
CMD_TIME="$4"

#-------------------------------------------------------------------------------
# Init
#-------------------------------------------------------------------------------
# Unalias all aliases
unalias -a

#-------------------------------------------------------------------------------
# Globals
#-------------------------------------------------------------------------------
CHECKOUT=""
CHECKOUT_IS_TAG=0
STAGED_CHANGED=""
STAGED_ADDED=""
STAGED_DELETED=""
CONFLICTS=""
UNSTAGED_CHANGED=""
UNSTAGED_DELETED=""
UNTRACKED=""
STASHES=""
SUBMODULE_UNSYNC=""
SUBMODULE_UNINIT=""
LOCAL_BRANCHES=""

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
# FANCY_PROMPT_TIMEOUT

# FANCY_PROMPT_USE_SYMBOLS
#     NOTE: this is a multi-char symbol which causes glitches with zsh tab
#     completion. e.g. vim <tab> if locale is not setup correctly.
#     export LC_CTYPE=en_US.UTF-8

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
var_enabled() {
    [[ -n "$1" && "$1" != 0 ]]
}

check_error() {
    local ret_code="$1"
    local code="$2"
    if [ "$ret_code" != 0 ]; then
        echo "ERROR $code:$ret_code"
        exit 1
    fi
}

check_command() {
    command -v "$1" &> /dev/null
}

convertsecs() {
    d=$((${1} / 86400))
    h=$((${1} / 3600))
    m=$((${1} % 3600 / 60))
    s=$((${1} % 60))
    if ((d!=0)); then
        printf "%dd %dh %dm %ds" "$d" "$h" "$m" "$s"
    elif ((h!=0)); then
        printf "%dh %dm %ds" "$h" "$m" "$s"
    elif ((m!=0)); then
        printf "%dm %ds" "$m" "$s"
    else
        printf "%ds" "$s"
    fi
}

vercomp() {
    if [[ "$1" == "$2" ]]; then
        return 0
    fi

    local -a ver1 ver2

    IFS='.' read -r -a ver1 <<< "$1"
    IFS='.' read -r -a ver2 <<< "$2"

    local i

    for ((i=0; i<${#ver1[@]} || i<${#ver2[@]}; i++)); do
        [[ -z ${ver1[i]} ]] && ver1[i]=0
        [[ -z ${ver2[i]} ]] && ver2[i]=0
        if ((ver1[i] > ver2[i])); then
            return 0
        elif ((ver1[i] < ver2[i])); then
            return 1
        fi
    done

    return 1
}

git_vercomp() {
    if [ -z "$GIT_VERSION" ]; then
        GIT_VERSION=$(git --version | awk '{print $3}')
    fi

    vercomp "$GIT_VERSION" "$1"
}

set_git_checkout() {
    if ! git_vercomp "1.7.2"; then
        CHECKOUT="!$(git rev-parse --abbrev-ref HEAD)"
        return
    fi

    # shellcheck disable=2207
    declare -a rp=($(git rev-parse --abbrev-ref HEAD --git-dir '@{u}'))

    local checkout=${rp[0]}

    local remote=$(git config --get branch."$checkout".remote)
    local upstream=$(git config --get branch."$checkout".upstream)

    if [[ $upstream != "" ]]; then
        local ucheckout=$checkout
        local upstream_arr=(${upstream//./ })
        if [[ ${#upstream_arr[@]} -gt 1 ]] ; then
            ucheckout=${upstream_arr[1]}
            upstream=${upstream_arr[0]}
        fi
        if [[ "$remote/$checkout" != "$upstream/$ucheckout" ]]; then
            read -ra AB <<< "$(git rev-list --left-right --count "$upstream"/"$ucheckout"...HEAD)"
            CHECKOUT_UPSTREAM="$upstream/$ucheckout"
            COMMITS_BEHIND_UPSTREAM=${AB[0]}
            COMMITS_AHEAD_UPSTREAM=${AB[1]}
        fi
    fi

    local git_dir=${rp[1]}
    local remote_full=${rp[2]}
    local push_branch=${remote_full#*/}  # upstream/main -> main

    if [[ $push_branch == "" ]]; then
        local merge; merge=$(git config --get branch."$checkout".merge)
        push_branch="$remote/$merge"
    fi

    CHECKOUT=$checkout

    if [[ "$CHECKOUT" =~ HEAD ]]; then
        local tag

        # Show short hash if not on a branch
        CHECKOUT=$(git rev-parse --short HEAD)

        if [[ -d "$git_dir/rebase-merge" || -d "$git_dir/rebase-apply" ]]; then
            # Are we rebasing?
            CHECKOUT="$CHECKOUT(rebasing)"
        elif [[ -f "$git_dir/BISECT_START" ]]; then
            # Are we bisecting?
            CHECKOUT="$CHECKOUT(bisecting)"
        elif tag=$(git describe --candidates=1 --exact-match); then
            CHECKOUT=$tag
            CHECKOUT_IS_TAG=1
        fi
    fi

    if [ -n "$push_branch" ]; then
        if [ "$CHECKOUT" != "$push_branch" ]; then
            CHECKOUT="$CHECKOUT->$push_branch"
        fi
    elif [[ $CHECKOUT_IS_TAG != 1 ]]; then
        CHECKOUT="$CHECKOUT!"
    fi
}

parse_porcelain_info() {
    local porcelain_info=$1
    # porcelain info should be common between git
    if [ "$porcelain_info" != "?" ]; then
        STAGED_CHANGED=0
        STAGED_ADDED=0
        STAGED_DELETED=0
        UNSTAGED_DELETED=0
        UNSTAGED_CHANGED=0
        UNTRACKED=0
        CONFLICTS=0

        while IFS= read -r line ; do
            if [[ $line =~ ^[MTRC][\ MD] ]]; then ((STAGED_CHANGED   ++)); fi
            if [[ $line =~ ^A[\ MD]      ]]; then ((STAGED_ADDED     ++)); fi
            if [[ $line =~ ^D\           ]]; then ((STAGED_DELETED   ++)); fi
            if [[ $line =~ ^[\ MARC]D    ]]; then ((UNSTAGED_DELETED ++)); fi
            if [[ $line =~ ^[\ MARC]M    ]]; then ((UNSTAGED_CHANGED ++)); fi
            if [[ $line =~ ^[?][?]       ]]; then ((UNTRACKED        ++)); fi
            if [[ $line =~ ^[DU][DU] ]] || [[ $line =~ ^[AU][AU]    ]]; then
                ((CONFLICTS++));
            fi
            # DD  unmerged, both deleted
            # AU  unmerged, added by us
            # UD  unmerged, deleted by them
            # UA  unmerged, added by them
            # DU  unmerged, deleted by us
            # AA  unmerged, both added
            # UU  unmerged, both modified
        done <<< "$porcelain_info"
    fi
}


get_local_branches() {
    # Local branches that do not have an upstream of the same name
    if git_vercomp "2.4.0"; then
        git branch -vv --format='%(refname:strip=2)#%(upstream:strip=3)' | grep -vcE '([^#]+)#\1'
    else
        git branch | grep -cv master
    fi
}

get_git_info() {
    if git_vercomp "1.7.2"; then
        timeout "$TIMEOUT2" git status --untracked-files=normal --branch --porcelain "$GIT_STATUS_OPTS"
    else
        timeout "$TIMEOUT2" git status --untracked-files=normal --porcelain
    fi
}

set_git_info() {
    local info
    info=$(get_git_info)

    local error
    error=$(check_error "$?" "2")

    parse_porcelain_info "$info"

    local submodule_info
    submodule_info=$(timeout "$TIMEOUT2" git submodule status --recursive 2> /dev/null)
    if [ "$submodule_info" != "" ]; then
        SUBMODULE_UNSYNC=$(grep -cE '^\+' <<< "$submodule_info")
        SUBMODULE_UNINIT=$(grep -cE '^-'  <<< "$submodule_info")
    fi

    if [ "$error" != "" ]; then
        return
    fi

    # branch_info=$(head -1 <<< "$info")
    # COMMITS_AHEAD=$(grep 'ahead'  <<< "$branch_info" | sed -E  's/.*ahead ([0-9]+).*/\1/g')
    # COMMITS_BEHIND=$(grep 'behind' <<< "$branch_info" | sed -E 's/.*behind ([0-9]+).*/\1/g')
    # error=$(check_error "$?" "4")
    COMMITS_BEHIND=$(git rev-list --count --left-only "HEAD@{upstream}...HEAD")
    COMMITS_AHEAD=$(git rev-list --count "HEAD@{upstream}..HEAD")

    if [ "$error" != "" ]; then
        return
    fi

    # # MacOS can add leading whitespace in wc output so pass through tr
    # STASHES=$(git stash list | wc -l | tr -d ' ')
    STASHES=$(git rev-list --walk-reflogs --count refs/stash)

    # Local branches that do not have an upstream of the same name
    LOCAL_BRANCHES=$(get_local_branches)

    set_git_checkout
}

build_section() {
    local colour=$1
    local symbol=$2
    local value=$3
    if [[ $value && $value != 0 ]]; then
        echo "$colour$symbol$value"
    fi
}

get_scm_prompt() {
    if [[ $CHECKOUT == "" ]]; then
        printf "%s" "$src_ctl_colour...$src_ctl_colour"
        return
    fi

    local src_ctrl=""
    local co_sym

    if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
        if [[ $CHECKOUT_IS_TAG == 1 ]]; then
            co_sym=""
        else
            co_sym=""
        fi
    fi

    src_ctrl+=$(build_section "$gray"   "$co_sym" "$CHECKOUT"      )
    src_ctrl+=$(build_section " $white"   ↑       "$COMMITS_AHEAD" )
    src_ctrl+=$(build_section " $white"   ↓       "$COMMITS_BEHIND")
    if [[ $CHECKOUT_UPSTREAM != "" ]]; then
        src_ctrl+=" $gray("
        src_ctrl+=$(build_section "$gray"   "$co_sym" "$CHECKOUT_UPSTREAM"      )
        src_ctrl+=$(build_section " $white"   ↑       "$COMMITS_AHEAD_UPSTREAM" )
        src_ctrl+=$(build_section " $white"   ↓       "$COMMITS_BEHIND_UPSTREAM")
        src_ctrl+="$gray)"
    fi
    src_ctrl+=$(build_section " $white"          "$SUBMODULE_UNINIT")
    src_ctrl+=$(build_section " $red"            "$SUBMODULE_UNSYNC")
    src_ctrl+=$(build_section " $green"   ●       "$STAGED_CHANGED"  )
    src_ctrl+=$(build_section " $green"   +       "$STAGED_ADDED"    )
    src_ctrl+=$(build_section " $green"   -       "$STAGED_DELETED"  )
    src_ctrl+=$(build_section " $red"     ✖       "$CONFLICTS"       )
    src_ctrl+=$(build_section " $red"     +       "$UNSTAGED_CHANGED")
    src_ctrl+=$(build_section " $red"     -       "$UNSTAGED_DELETED")
    # src_ctrl+=$(build_section " $magenta" +        "$UNTRACKED"       )
    src_ctrl+=$(build_section " $magenta" …       "$UNTRACKED"       )
    src_ctrl+=$(build_section " $red"     ⚑       "$STASHES"         )
    src_ctrl+=$(build_section " $yellow"         "$LOCAL_BRANCHES"  )


    printf "%s" "$src_ctl_colour$src_ctrl$src_ctl_colour"
}

get_prompt_arrow() {
    if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
        arrow="❯"
    else
        arrow=">"
    fi

    echo "$ret_colour$arrow$end"
}

tmux_rename() {
    local tmux_target_win="$(tmux display-message -p '#I')"
    tmux rename-window -t "$tmux_target_win" "$1"
}

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
GIT_STATUS_OPTS="--ignore-submodules"
TIMEOUT=${FANCY_PROMPT_TIMEOUT-3}
TIMEOUT2=$((TIMEOUT*2))

if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
    FANCY_PROMPT_USE_SYMBOLS=1
fi

#-------------------------------------------------------------------------------
# Attributes & Colours
#-------------------------------------------------------------------------------
if [ "$SHELL" == "bash" ]; then
    c_start='\['
    c_end='\]'
    user='\u'
    host='\H'
else # csh, tcsh and zsh
    c_start='%{'
    c_end='%}'
    user='%n'
    host='%m'
fi

# reverse="${c_start}\\e[3;35m${c_end}"
# underlined="${c_start}\\e[4;35m${c_end}"
# dim="${c_start}\\e[10;35m${c_end}"
gray="$c_start\\e[0;90m$c_end"
red="$c_start\\e[0;31m$c_end"
green="$c_start\\e[0;32m$c_end"
yellow="$c_start\\e[0;33m$c_end"
blue="$c_start\\e[0;34m$c_end"
magenta="$c_start\\e[0;35m$c_end"
cyan="$c_start\\e[0;36m$c_end"
white="$c_start\\e[0;37m$c_end"
end="$c_start\\e[0m$c_end" # This is needed at the end.

# Use a different colour for each shell.

case "$SHELL" in
    bash) dir_colour="$yellow"  ;;
    zsh)  dir_colour="$green"   ;;
    *)    dir_colour="$magenta" ;;
esac

src_ctl_colour="$gray"

#-------------------------------------------------------------------------------
# Source Control
#-------------------------------------------------------------------------------

ORIG_PWD=$(pwd)
# If we a located somewhere deep in .git/.. then navigate out of it to prevent
# the error: "fatal: This operation must be run in a work tree"
if pwd | grep -q "\\.git\(/.*\)\?$"; then
    IN_BARE_GITDIR=$(git rev-parse --is-bare-repository)
    cd "$(pwd | sed -E 's%[^/]*\.git(\/.*)?$%%g')" || exit
    IN_GITDIR=true
else
    IN_GITDIR=false
fi

# Return 'true' or 'false' which can be directly evaluated
IN_GIT=$(git rev-parse --is-inside-work-tree 2> /dev/null || echo false)

prompt_info=""
if $IN_GIT; then
    if ((!FAST)); then
        set_git_info
    fi
    prompt_info+="$(get_scm_prompt)"
fi

if ((!FAST)) && check_command gh && check_command jq; then
    gh_notifications=$(gh api notifications | jq '. | length')
    if ((gh_notifications > 0)); then
        prompt_info+=" $white  $gh_notifications"
    fi
fi

if $IN_BARE_GITDIR; then
    dir=$(basename $ORIG_PWD)
elif $IN_GITDIR; then
    dir=$(basename "$(git rev-parse --show-toplevel)")/$(sed -E 's/.*\/([^/]*\.git(\/.*)?)/\1/' <<< "$ORIG_PWD")
elif $IN_GIT; then
    dir=$(basename "$(git rev-parse --show-toplevel)")/$(git rev-parse --show-prefix)
    dir=${dir%?}  # Remove last /
elif [ "$SHELL" == "bash" ]; then
    dir='\W'
else
    dir='%c'
fi

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
prompt=""
prompt+="$blue"
prompt+="$host:"
prompt+="$cyan"
prompt+="$user:"
prompt+="$dir_colour"
prompt+="$dir "

if [ "$RET_CODE" -eq 0 ]; then
    ret_colour="$cyan"
else
    ret_colour="$red"
fi

prompt_time=''
if [[ $CMD_TIME ]] && ! [[ $CMD_TIME == 0* ]]; then
    prompt_time="$gray$(convertsecs "$CMD_TIME")"
fi

prompt_end="$(get_prompt_arrow) "

if $IN_GIT; then
    if [[ $CHECKOUT != "" ]]; then
        name="$(git rev-parse --show-toplevel | xargs basename)"
        if [[ $TMUX ]]; then
            tmux_rename "$name#[fg=colour8][$CHECKOUT]"
        fi
    fi
elif [[ $TMUX ]]; then
    tmux_rename "$(basename "$ORIG_PWD")"
fi

printf "%s" "$prompt_time\\n"
printf "%s" "$prompt$prompt_info\\n$prompt_end"
